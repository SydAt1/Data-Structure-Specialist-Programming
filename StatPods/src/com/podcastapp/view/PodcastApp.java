package com.podcastapp.view;

import com.podcastapp.model.PodcastModel;
import com.podcastapp.controller.ValidationUtil;
import com.podcastapp.controller.algorithm.CustomInsertionSort;
import com.podcastapp.controller.algorithm.CustomSelectionSort;
import com.podcastapp.controller.algorithm.BinarySearchAlgorithm;
import com.podcastapp.controller.algorithm.CustomMergeSort;
import com.podcastapp.controller.datastructure.CustomQueue;
import com.podcastapp.controller.datastructure.CustomStack;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Siddhartha Singh
 */
public class PodcastApp extends javax.swing.JFrame {

    private java.awt.CardLayout cardLayout;
    private final ValidationUtil validationUtil;

    /**
     * Creates new form CollegeApp
     */
    public PodcastApp() {
        this.podcastQueue = new CustomQueue(10);
        initComponents();
        podcastsList = new LinkedList<>(); // Initialize the list
        validationUtil = new ValidationUtil();
        initializeLayout();
        initializeData();
        startProgress();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainScreen = new javax.swing.JPanel();
        pnlMainBar = new javax.swing.JPanel();
        lblMainBarSlogan = new javax.swing.JLabel();
        lblMainBarLogo = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        tabPaneMain = new javax.swing.JTabbedPane();
        pnlHome = new javax.swing.JPanel();
        homePnl = new javax.swing.JLabel();
        pnlPodcastList = new javax.swing.JPanel();
        spTblStudent = new javax.swing.JScrollPane();
        tblPodcast = new javax.swing.JTable();
        pnlWishList = new javax.swing.JPanel();
        lblTblWishList = new javax.swing.JLabel();
        queueField = new javax.swing.JTextField();
        queuePods = new javax.swing.JButton();
        queueError = new javax.swing.JLabel();
        pnlFilter = new javax.swing.JPanel();
        lblTblFilter = new javax.swing.JLabel();
        filterBox = new javax.swing.JComboBox<>();
        filterBtn = new javax.swing.JButton();
        lblTblStudentTitle1 = new javax.swing.JLabel();
        lblTblStudentTitle3 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        pnlAdmin = new javax.swing.JPanel();
        AddPnl = new javax.swing.JPanel();
        idField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        genreField = new javax.swing.JTextField();
        hostNameField = new javax.swing.JTextField();
        listeningField = new javax.swing.JTextField();
        dateField = new javax.swing.JTextField();
        ratingField = new javax.swing.JTextField();
        podStudioField = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        lblTblStudentTitle = new javax.swing.JLabel();
        idError = new javax.swing.JLabel();
        nameError = new javax.swing.JLabel();
        genreError = new javax.swing.JLabel();
        podDateError = new javax.swing.JLabel();
        hostError = new javax.swing.JLabel();
        listeningError = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        ratingError = new javax.swing.JLabel();
        podStudioError = new javax.swing.JLabel();
        deletePanel = new javax.swing.JPanel();
        deleteInfo = new javax.swing.JLabel();
        idField1 = new javax.swing.JTextField();
        idError1 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        spTblPodsQueue = new javax.swing.JScrollPane();
        tblQueuePodcast = new javax.swing.JTable();
        lblTblStudentTitle2 = new javax.swing.JLabel();
        playPodcastBtn = new javax.swing.JButton();
        rewindBtn = new javax.swing.JButton();
        pnlAboutUs = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pnlLoginScreen = new javax.swing.JPanel();
        lblLoginTitle = new javax.swing.JLabel();
        txtFldLoginUsername = new javax.swing.JTextField();
        pwdFldLogin = new javax.swing.JPasswordField();
        lblLoginSubTitle = new javax.swing.JLabel();
        lblLoginForgotPwd = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lblLoginError = new javax.swing.JLabel();
        lblLoginLogo = new javax.swing.JLabel();
        pnlLoadingScreen = new javax.swing.JPanel();
        lblLoadingLogo = new javax.swing.JLabel();
        pgBarSplashScreen = new javax.swing.JProgressBar(0,100);
        lblLoading = new javax.swing.JLabel();

        pnlMainScreen.setBackground(new java.awt.Color(0, 0, 0));
        pnlMainScreen.setMaximumSize(new java.awt.Dimension(1130, 577));
        pnlMainScreen.setMinimumSize(new java.awt.Dimension(1130, 577));
        pnlMainScreen.setPreferredSize(new java.awt.Dimension(1130, 577));

        pnlMainBar.setBackground(new java.awt.Color(23, 26, 32));

        lblMainBarSlogan.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        lblMainBarSlogan.setForeground(new java.awt.Color(255, 255, 255));
        lblMainBarSlogan.setText("Pods For Stats");

        lblMainBarLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/pods.png"))); // NOI18N

        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnLogout.setText("Log out");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        tabPaneMain.setBackground(new java.awt.Color(23, 26, 32));
        tabPaneMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(58, 66, 83)));
        tabPaneMain.setForeground(new java.awt.Color(255, 255, 255));
        tabPaneMain.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N

        pnlHome.setBackground(new java.awt.Color(0, 0, 0));
        pnlHome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(58, 66, 83)));

        homePnl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/img_home.png"))); // NOI18N
        homePnl.setText("jLabel1");

        javax.swing.GroupLayout pnlHomeLayout = new javax.swing.GroupLayout(pnlHome);
        pnlHome.setLayout(pnlHomeLayout);
        pnlHomeLayout.setHorizontalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addComponent(homePnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlHomeLayout.setVerticalGroup(
            pnlHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHomeLayout.createSequentialGroup()
                .addComponent(homePnl, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPaneMain.addTab("Home", pnlHome);

        pnlPodcastList.setBackground(new java.awt.Color(0, 0, 0));
        pnlPodcastList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblPodcast.setBackground(new java.awt.Color(23, 26, 32));
        tblPodcast.setForeground(new java.awt.Color(255, 255, 255));
        tblPodcast.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Podcast ID", "Podcast Name", "Genre", "Host Name", "Upload Date", "Listening Minutes", "Ratings", "Podcast Studios"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPodcast.setGridColor(new java.awt.Color(0, 0, 0));
        tblPodcast.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblPodcast.setSelectionForeground(new java.awt.Color(234, 192, 32));
        tblPodcast.setShowGrid(true);
        tblPodcast.getTableHeader().setReorderingAllowed(false);
        spTblStudent.setViewportView(tblPodcast);
        if (tblPodcast.getColumnModel().getColumnCount() > 0) {
            tblPodcast.getColumnModel().getColumn(0).setResizable(false);
            tblPodcast.getColumnModel().getColumn(0).setHeaderValue("Podcast ID");
            tblPodcast.getColumnModel().getColumn(1).setResizable(false);
            tblPodcast.getColumnModel().getColumn(2).setResizable(false);
            tblPodcast.getColumnModel().getColumn(3).setResizable(false);
            tblPodcast.getColumnModel().getColumn(4).setResizable(false);
            tblPodcast.getColumnModel().getColumn(4).setPreferredWidth(40);
            tblPodcast.getColumnModel().getColumn(4).setHeaderValue("Upload Date");
            tblPodcast.getColumnModel().getColumn(5).setResizable(false);
            tblPodcast.getColumnModel().getColumn(5).setHeaderValue("Listening Minutes");
            tblPodcast.getColumnModel().getColumn(6).setResizable(false);
            tblPodcast.getColumnModel().getColumn(6).setHeaderValue("Ratings");
            tblPodcast.getColumnModel().getColumn(7).setResizable(false);
            tblPodcast.getColumnModel().getColumn(7).setHeaderValue("Podcast Studios");
        }

        pnlWishList.setBackground(new java.awt.Color(58, 66, 83));
        pnlWishList.setForeground(new java.awt.Color(255, 255, 255));

        lblTblWishList.setBackground(new java.awt.Color(255, 255, 255));
        lblTblWishList.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTblWishList.setForeground(new java.awt.Color(255, 255, 255));
        lblTblWishList.setText("Podcast Wishlist");

        queueField.setBackground(new java.awt.Color(58, 66, 83));
        queueField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        queueField.setForeground(new java.awt.Color(255, 255, 255));
        queueField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Podcast ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        queuePods.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/icon_queue.png"))); // NOI18N
        queuePods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queuePodsActionPerformed(evt);
            }
        });

        queueError.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout pnlWishListLayout = new javax.swing.GroupLayout(pnlWishList);
        pnlWishList.setLayout(pnlWishListLayout);
        pnlWishListLayout.setHorizontalGroup(
            pnlWishListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWishListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlWishListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlWishListLayout.createSequentialGroup()
                        .addComponent(lblTblWishList, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlWishListLayout.createSequentialGroup()
                        .addGroup(pnlWishListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(queueError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(queueField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(queuePods, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlWishListLayout.setVerticalGroup(
            pnlWishListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlWishListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTblWishList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlWishListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(queueField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(queuePods, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queueError)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pnlFilter.setBackground(new java.awt.Color(58, 66, 83));
        pnlFilter.setForeground(new java.awt.Color(255, 255, 255));

        lblTblFilter.setBackground(new java.awt.Color(255, 255, 255));
        lblTblFilter.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTblFilter.setForeground(new java.awt.Color(255, 255, 255));
        lblTblFilter.setText("Filter:");

        filterBox.setBackground(new java.awt.Color(58, 66, 83));
        filterBox.setForeground(new java.awt.Color(255, 255, 255));
        filterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Default>", "By PodcastID", "Most Listened To", "Best Rated" }));
        filterBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        filterBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/icon_filter.png"))); // NOI18N
        filterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFilterLayout = new javax.swing.GroupLayout(pnlFilter);
        pnlFilter.setLayout(pnlFilterLayout);
        pnlFilterLayout.setHorizontalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTblFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFilterLayout.createSequentialGroup()
                        .addComponent(filterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnlFilterLayout.setVerticalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlFilterLayout.createSequentialGroup()
                        .addComponent(lblTblFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        lblTblStudentTitle1.setBackground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTblStudentTitle1.setForeground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle1.setText("Podcast Information");

        lblTblStudentTitle3.setBackground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTblStudentTitle3.setForeground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle3.setText("Podcast Information:");

        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFieldFocusLost(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPodcastListLayout = new javax.swing.GroupLayout(pnlPodcastList);
        pnlPodcastList.setLayout(pnlPodcastListLayout);
        pnlPodcastListLayout.setHorizontalGroup(
            pnlPodcastListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPodcastListLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(pnlPodcastListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlPodcastListLayout.createSequentialGroup()
                        .addComponent(lblTblStudentTitle3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBtn)
                        .addGap(6, 6, 6))
                    .addComponent(spTblStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 1051, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlPodcastListLayout.createSequentialGroup()
                        .addComponent(pnlWishList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
            .addGroup(pnlPodcastListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPodcastListLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblTblStudentTitle1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pnlPodcastListLayout.setVerticalGroup(
            pnlPodcastListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPodcastListLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(pnlPodcastListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTblStudentTitle3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spTblStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPodcastListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlWishList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
            .addGroup(pnlPodcastListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPodcastListLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblTblStudentTitle1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        tabPaneMain.addTab("Podcasts List", pnlPodcastList);

        pnlAdmin.setBackground(new java.awt.Color(0, 0, 0));

        AddPnl.setBackground(new java.awt.Color(58, 66, 83));
        AddPnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        idField.setBackground(new java.awt.Color(58, 66, 83));
        idField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        idField.setForeground(new java.awt.Color(255, 255, 255));
        idField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Podcast ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(idField, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 38, 280, 44));

        nameField.setBackground(new java.awt.Color(58, 66, 83));
        nameField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        nameField.setForeground(new java.awt.Color(255, 255, 255));
        nameField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Podcast Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 40, 280, 44));

        genreField.setBackground(new java.awt.Color(58, 66, 83));
        genreField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        genreField.setForeground(new java.awt.Color(255, 255, 255));
        genreField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Genre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(genreField, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, 272, 44));

        hostNameField.setBackground(new java.awt.Color(58, 66, 83));
        hostNameField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        hostNameField.setForeground(new java.awt.Color(255, 255, 255));
        hostNameField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Host Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(hostNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 280, 44));

        listeningField.setBackground(new java.awt.Color(58, 66, 83));
        listeningField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        listeningField.setForeground(new java.awt.Color(255, 255, 255));
        listeningField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Listening Minutes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(listeningField, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 110, 270, 46));

        dateField.setBackground(new java.awt.Color(58, 66, 83));
        dateField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        dateField.setForeground(new java.awt.Color(255, 255, 255));
        dateField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Podcast Start Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(dateField, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 110, 280, 44));

        ratingField.setBackground(new java.awt.Color(58, 66, 83));
        ratingField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        ratingField.setForeground(new java.awt.Color(255, 255, 255));
        ratingField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Ratings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(ratingField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 280, 46));

        podStudioField.setBackground(new java.awt.Color(58, 66, 83));
        podStudioField.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        podStudioField.setForeground(new java.awt.Color(255, 255, 255));
        podStudioField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Podcast Studios", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        AddPnl.add(podStudioField, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, 280, 46));

        addBtn.setBackground(new java.awt.Color(58, 66, 83));
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/icon_add.png"))); // NOI18N
        addBtn.setBorder(null);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        AddPnl.add(addBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 40, 54, -1));

        clearBtn.setBackground(new java.awt.Color(58, 66, 83));
        clearBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/icon_clear.png"))); // NOI18N
        clearBtn.setBorder(null);
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        AddPnl.add(clearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 40, 50, 50));

        lblTblStudentTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTblStudentTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle.setText("Podcast Information");
        AddPnl.add(lblTblStudentTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, -1, -1));

        idError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(idError, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 88, 330, 20));

        nameError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(nameError, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, 272, 12));

        genreError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(genreError, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 90, 266, 18));

        podDateError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(podDateError, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 160, 274, 20));

        hostError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(hostError, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 274, 20));

        listeningError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(listeningError, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 160, 280, 20));

        updateBtn.setBackground(new java.awt.Color(58, 66, 83));
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/update.png"))); // NOI18N
        updateBtn.setBorder(null);
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        AddPnl.add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 110, 64, -1));

        ratingError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(ratingError, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 274, 20));

        podStudioError.setForeground(new java.awt.Color(255, 0, 0));
        AddPnl.add(podStudioError, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 230, 274, 20));

        deletePanel.setBackground(new java.awt.Color(58, 66, 83));

        deleteInfo.setBackground(new java.awt.Color(255, 255, 255));
        deleteInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteInfo.setForeground(new java.awt.Color(255, 255, 255));
        deleteInfo.setText("Delete Podcast");

        idField1.setBackground(new java.awt.Color(58, 66, 83));
        idField1.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        idField1.setForeground(new java.awt.Color(255, 255, 255));
        idField1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Podcast ID", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bahnschrift", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        idError1.setForeground(new java.awt.Color(255, 0, 0));

        deleteBtn.setBackground(new java.awt.Color(58, 66, 83));
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/deleteIcon.gif"))); // NOI18N
        deleteBtn.setBorder(null);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deletePanelLayout = new javax.swing.GroupLayout(deletePanel);
        deletePanel.setLayout(deletePanelLayout);
        deletePanelLayout.setHorizontalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addComponent(deleteInfo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addComponent(idField1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
            .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(deletePanelLayout.createSequentialGroup()
                    .addGap(59, 59, 59)
                    .addComponent(idError1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addGap(60, 60, 60)))
        );
        deletePanelLayout.setVerticalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteInfo)
                .addGap(18, 18, 18)
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(idField1, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(deletePanelLayout.createSequentialGroup()
                    .addGap(91, 91, 91)
                    .addComponent(idError1)
                    .addContainerGap(28, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout pnlAdminLayout = new javax.swing.GroupLayout(pnlAdmin);
        pnlAdmin.setLayout(pnlAdminLayout);
        pnlAdminLayout.setHorizontalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addGap(316, 316, 316)
                .addComponent(deletePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAdminLayout.setVerticalGroup(
            pnlAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdminLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deletePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        tabPaneMain.addTab("User Control", pnlAdmin);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        tblQueuePodcast.setBackground(new java.awt.Color(23, 26, 32));
        tblQueuePodcast.setForeground(new java.awt.Color(255, 255, 255));
        tblQueuePodcast.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Queue No.", "Podcast Name", "Genre", "Host Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblQueuePodcast.setGridColor(new java.awt.Color(0, 0, 0));
        tblQueuePodcast.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblQueuePodcast.setSelectionForeground(new java.awt.Color(234, 192, 32));
        tblQueuePodcast.setShowGrid(true);
        tblQueuePodcast.getTableHeader().setReorderingAllowed(false);
        spTblPodsQueue.setViewportView(tblQueuePodcast);
        if (tblQueuePodcast.getColumnModel().getColumnCount() > 0) {
            tblQueuePodcast.getColumnModel().getColumn(0).setResizable(false);
            tblQueuePodcast.getColumnModel().getColumn(1).setResizable(false);
            tblQueuePodcast.getColumnModel().getColumn(2).setResizable(false);
            tblQueuePodcast.getColumnModel().getColumn(3).setResizable(false);
        }

        lblTblStudentTitle2.setBackground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTblStudentTitle2.setForeground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle2.setText("Podcast Information");

        playPodcastBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/icon_queued.png"))); // NOI18N
        playPodcastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPodcastBtnActionPerformed(evt);
            }
        });

        rewindBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rewindBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addComponent(spTblPodsQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblTblStudentTitle2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(514, 514, 514)
                        .addComponent(playPodcastBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rewindBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(lblTblStudentTitle2)
                .addGap(8, 8, 8)
                .addComponent(spTblPodsQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rewindBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playPodcastBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68))
        );

        tabPaneMain.addTab("Queue Pods", jPanel1);

        pnlAboutUs.setBackground(new java.awt.Color(0, 0, 0));
        pnlAboutUs.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(23, 26, 32), 1, true));
        pnlAboutUs.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 0, 9)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("<html>StatsPods is a data-driven insights platform positioned<br> to revolutionize how podcast lovers will interact with their favorite content. Founded in 2024 amidst a booming landscape that houses over 40 million podcast listeners on Spotify, we empower users with high-scale analytics and personalized insights to comprehend their listening behavior more effectively. Through combining potent tracking capabilities with intuitive features, this service offers listeners the facility to keep track of habits, discover new content, and mark podcasts in your queue more easily than ever. Be it tracking hours listened, analyzing genre preferences, or maintaining a curated wishlist-StatsPods is here to be your personal analytics companion for podcasts and to let you make the most out of the listening experience while uncovering meaningful patterns in content consumption. ");
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        pnlAboutUs.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 160, 240, 230));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/img_aboutus.jpg"))); // NOI18N
        pnlAboutUs.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1120, 430));

        tabPaneMain.addTab("About Us", pnlAboutUs);

        javax.swing.GroupLayout pnlMainBarLayout = new javax.swing.GroupLayout(pnlMainBar);
        pnlMainBar.setLayout(pnlMainBarLayout);
        pnlMainBarLayout.setHorizontalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainBarLayout.createSequentialGroup()
                        .addComponent(tabPaneMain)
                        .addContainerGap())
                    .addGroup(pnlMainBarLayout.createSequentialGroup()
                        .addComponent(lblMainBarLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMainBarSlogan, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogout)
                        .addGap(61, 61, 61))))
        );
        pnlMainBarLayout.setVerticalGroup(
            pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainBarLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(pnlMainBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMainBarSlogan)
                            .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblMainBarLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(tabPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout pnlMainScreenLayout = new javax.swing.GroupLayout(pnlMainScreen);
        pnlMainScreen.setLayout(pnlMainScreenLayout);
        pnlMainScreenLayout.setHorizontalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlMainScreenLayout.setVerticalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addComponent(pnlMainBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pnlLoginScreen.setBackground(new java.awt.Color(23, 26, 32));
        pnlLoginScreen.setMaximumSize(new java.awt.Dimension(1130, 514));
        pnlLoginScreen.setMinimumSize(new java.awt.Dimension(1130, 514));
        pnlLoginScreen.setPreferredSize(new java.awt.Dimension(1130, 514));

        lblLoginTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblLoginTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblLoginTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginTitle.setText("Sign in to StatPods");

        txtFldLoginUsername.setBackground(new java.awt.Color(23, 26, 32));
        txtFldLoginUsername.setForeground(new java.awt.Color(255, 255, 255));
        txtFldLoginUsername.setText("admin");
        txtFldLoginUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true), "Username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        pwdFldLogin.setBackground(new java.awt.Color(23, 26, 32));
        pwdFldLogin.setForeground(new java.awt.Color(255, 255, 255));
        pwdFldLogin.setText("admin");
        pwdFldLogin.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        lblLoginSubTitle.setBackground(new java.awt.Color(234, 192, 32));
        lblLoginSubTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblLoginSubTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginSubTitle.setText("Please enter your login details below using this app.");

        lblLoginForgotPwd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLoginForgotPwd.setForeground(new java.awt.Color(255, 255, 255));
        lblLoginForgotPwd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoginForgotPwd.setText("Forgot your password?");

        btnLogin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblLoginError.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLoginError.setForeground(new java.awt.Color(255, 0, 0));
        lblLoginError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblLoginLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/podcastapp/resources/img_loginLogo.png"))); // NOI18N

        javax.swing.GroupLayout pnlLoginScreenLayout = new javax.swing.GroupLayout(pnlLoginScreen);
        pnlLoginScreen.setLayout(pnlLoginScreenLayout);
        pnlLoginScreenLayout.setHorizontalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(400, 400, 400)
                        .addComponent(lblLoginLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(lblLoginForgotPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(lblLoginTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(lblLoginSubTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(355, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginScreenLayout.createSequentialGroup()
                .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pwdFldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldLoginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(499, 499, 499))
        );
        pnlLoginScreenLayout.setVerticalGroup(
            pnlLoginScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginScreenLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(lblLoginLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLoginTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLoginSubTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFldLoginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwdFldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLoginForgotPwd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1130, 577));
        setSize(new java.awt.Dimension(1130, 577));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlLoadingScreen.setBackground(new java.awt.Color(23, 26, 32));

        lblLoadingLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoadingLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/collegeapp/resources/animation (1).gif"))); // NOI18N

        pgBarSplashScreen.setStringPainted(true);
        pgBarSplashScreen.setBackground(new java.awt.Color(255, 255, 255));
        pgBarSplashScreen.setForeground(new java.awt.Color(0, 0, 0));

        lblLoading.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLoading.setForeground(new java.awt.Color(255, 255, 255));
        lblLoading.setText("Loading...");

        javax.swing.GroupLayout pnlLoadingScreenLayout = new javax.swing.GroupLayout(pnlLoadingScreen);
        pnlLoadingScreen.setLayout(pnlLoadingScreenLayout);
        pnlLoadingScreenLayout.setHorizontalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoadingScreenLayout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 922, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addGroup(pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblLoading))
                    .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlLoadingScreenLayout.setVerticalGroup(
            pnlLoadingScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadingScreenLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblLoadingLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgBarSplashScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLoading)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// Method to set up the CardLayout and add panels
    
    /**
    * Initializes the layout of the main application window using a CardLayout.
    * <p>
    * This method sets up the content pane with different panels for the loading screen,
    * login screen, and main screen. It starts by displaying the loading screen.
    * </p>
    */
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlLoadingScreen, "LoadingScreen");
        getContentPane().add(pnlLoginScreen, "LoginScreen");
        getContentPane().add(pnlMainScreen, "MainScreen");

        // Start with the loading screen
        cardLayout.show(getContentPane(), "LoadingScreen");
    }

     /**
     * Initializes the application's data, including the podcast list and table.
     * Populates the podcast list with sample data for demonstration purposes.
     */
    private void initializeData() {
        podcastsList = new LinkedList<>();

        // Create PodcastModel instances with proper field initialization
        podcastsList.add(new PodcastModel(
            101,                    // Podcast ID
            "TechTalk",             // Podcast Name
            "Technology",           // Genre
            "John Doe",             // Host Name
            "2024-12-01",           // Upload Date
            1500,                 // Listening Minutes
            4.5,                    // Ratings
            "Studio A"              // Podcast Studios
        ));
        podcastsList.add(new PodcastModel(
            102,                    // Podcast ID
            "HealthHub",            // Podcast Name
            "Health",               // Genre
            "Jane Smith",           // Host Name
            "2024-12-05",           // Upload Date
            1200,                 // Listening Minutes
            4.2,                    // Ratings
            "Studio B"              // Podcast Studios
        ));
    }


     /**
     * Simulates the loading progress using a SwingWorker thread. Updates a
     * progress bar incrementally and switches to the login screen upon
     * completion.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(38); // Simulated delay for progress bar
                    publish(i);
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgBarSplashScreen.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute();
    }

    /**
     * Switches the application screen to the specified screen name.
     *
     * @param screenName The name of the screen to display.
     */
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }
    
    /**
     * Handles the login button action. Validates the username and password
     * input and navigates to the main screen if credentials are correct.
     * Displays appropriate error messages otherwise.
     *
     * @param evt The action event triggered by the login button.
     */
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Get the username and password input
        String username = txtFldLoginUsername.getText();
        String password = new String(pwdFldLogin.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            lblLoginError.setText("Please enter your username and password.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            lblLoginError.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            lblLoginError.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_btnLoginActionPerformed
    
    /**
     * Handles the logout button action. Clears the login fields and switches
     * back to the login screen.
     *
     * @param evt The action event triggered by the logout button.
     */
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        pwdFldLogin.setText("");
        txtFldLoginUsername.setText("");
        loadScreen("LoginScreen"); // Load the main screen
    }//GEN-LAST:event_btnLogoutActionPerformed
        
    Border defaultBorder = BorderFactory.createLineBorder(Color.WHITE);
    Border errorBorder = BorderFactory.createLineBorder(Color.RED);
    
    /**
    * Creates a TitledBorder with the specified title and border.
    * <p>
    * The title color is set to red if the provided border is the error border;
    * otherwise, it is set to white.
    * </p>
    *
    * @param title the title to be displayed on the border.
    * @param border the border to be used for the TitledBorder.
    * @return a TitledBorder with the specified title and color.
    */
    private TitledBorder createTitledBorder(String title, Border border) {
        
        TitledBorder titledBorder = BorderFactory.createTitledBorder(border, title);
        titledBorder.setTitleColor(border == errorBorder ? Color.RED : Color.WHITE);
        return titledBorder;
    }
    
    private List<PodcastModel> podcastsList = new LinkedList<>();
    
    /**
    * Checks if a podcast with the specified ID exists in the podcast list.
    *
    * @param podId the ID of the podcast to check.
    * @return {@code true} if a podcast with the given ID exists; {@code false} otherwise.
    */
    private boolean isPodcastIdExists(int podId) {
    for (PodcastModel podcast : podcastsList) {
        if (podcast.getPodcastId() == podId) {
            return true;
        }
    }
    return false;
    }
    
    /**
     * Event handler for the Add button action. Validates input fields, creates
     * a new podcast record if valid, and checks for duplicate Podcast IDs before
     * adding the record to the podcast list.
     *
     * @param evt the ActionEvent triggered by the Add button
     */
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        resetBorder();
        errorTextReset();

        // Get input values
        String podIdStr = idField.getText();
        String podName = nameField.getText();
        String genre = genreField.getText();
        String hostName = hostNameField.getText();
        String uploadDate = dateField.getText();
        String listening = listeningField.getText();
        String ratingsStr = ratingField.getText();
        String podStudio = podStudioField.getText();

        boolean isError = false;
        int podId = 0;
        double ratings = 0.0;

        // Validate Podcast ID
        if (ValidationUtil.isNullOrEmpty(podIdStr)) {
            idError.setText("Podcast ID cannot be empty");
            idField.setBorder(createTitledBorder("Podcast ID", errorBorder));
            isError = true;
        } else {
            try {
                podId = Integer.parseInt(podIdStr);
                if (!ValidationUtil.isValidPodcastId(podId)) {
                    idError.setText("Podcast ID must be 3 digits");
                    idField.setBorder(createTitledBorder("Podcast ID", errorBorder));
                    isError = true;
                } else if (isPodcastIdExists(podId)) { // Duplicate check
                    idError.setText("Podcast ID already exists");
                    idField.setBorder(createTitledBorder("Podcast ID", errorBorder));
                    isError = true;
                }
            } catch (NumberFormatException e) {
                idError.setText("Podcast ID must be a valid number");
                idField.setBorder(createTitledBorder("Podcast ID", errorBorder));
                isError = true;
            }
        }

        // Validate Podcast Name
        if (ValidationUtil.isNullOrEmpty(podName)) {
            nameError.setText("Podcast Name cannot be empty");
            nameField.setBorder(createTitledBorder("Podcast Name", errorBorder));
            isError = true;
        } else if (!ValidationUtil.isValidPodcastName(podName)) {
            nameError.setText("Podcast Name must be alphanumeric");
            nameField.setBorder(createTitledBorder("Podcast Name", errorBorder));
            isError = true;
        }

        // Validate Genre
        if (ValidationUtil.isNullOrEmpty(genre)) {
            genreError.setText("Genre cannot be empty");
            genreField.setBorder(createTitledBorder("Genre", errorBorder));
            isError = true;
        } else if (!ValidationUtil.isValidGenre(genre)) {
            genreError.setText("Invalid Genre");
            genreField.setBorder(createTitledBorder("Genre", errorBorder));
            isError = true;
        }

        // Validate Host Name
        if (ValidationUtil.isNullOrEmpty(hostName)) {
            hostError.setText("Host Name cannot be empty");
            hostNameField.setBorder(createTitledBorder("Host Name", errorBorder));
            isError = true;
        } else if (!ValidationUtil.isValidHostName(hostName)) {
            hostError.setText("Host Name must be alphabetic");
            hostNameField.setBorder(createTitledBorder("Host Name", errorBorder));
            isError = true;
        }

        // Validate Upload Date
        if (ValidationUtil.isNullOrEmpty(uploadDate)) {
            podDateError.setText("Date cannot be empty");
            dateField.setBorder(createTitledBorder("Date", errorBorder));
            isError = true;
        } else if (!ValidationUtil.isValidDate(uploadDate)) {
            podDateError.setText("Date must be in yyyy-MM-dd format");
            dateField.setBorder(createTitledBorder("Date", errorBorder));
            isError = true;
        }

        // Validate Listening Hours
        if (ValidationUtil.isNullOrEmpty(listening)) {
            listeningError.setText("Listening Hours cannot be empty");
            listeningField.setBorder(createTitledBorder("Listening", errorBorder));
            isError = true;
        } else {
            try {
                int listeningHours = Integer.parseInt(listening);
                if (!ValidationUtil.isValidListeningHours(listeningHours)) {
                    listeningError.setText("Listening Hours out of range");
                    listeningField.setBorder(createTitledBorder("Listening", errorBorder));
                    isError = true;
                }
            } catch (NumberFormatException e) {
                listeningError.setText("Listening Hours must be numeric");
                listeningField.setBorder(createTitledBorder("Listening", errorBorder));
                isError = true;
            }
        }

        // Validate Ratings
        if (ValidationUtil.isNullOrEmpty(ratingsStr)) {
            ratingError.setText("Ratings cannot be empty");
            ratingField.setBorder(createTitledBorder("Ratings", errorBorder));
            isError = true;
        } else {
            try {
                ratings = Double.parseDouble(ratingsStr);
                if (!ValidationUtil.isValidRatings(ratings)) {
                    ratingError.setText("Ratings must be between 1.0 and 5.0");
                    ratingField.setBorder(createTitledBorder("Ratings", errorBorder));
                    isError = true;
                }
            } catch (NumberFormatException e) {
                ratingError.setText("Ratings must be numeric");
                ratingField.setBorder(createTitledBorder("Ratings", errorBorder));
                isError = true;
            }
        }

        // Validate Podcast Studio
        if (ValidationUtil.isNullOrEmpty(podStudio)) {
            podStudioError.setText("Podcast Studio cannot be empty");
            podStudioField.setBorder(createTitledBorder("Studio", errorBorder));
            isError = true;
        } else if (!ValidationUtil.isValidPodcastStudio(podStudio)) {
            podStudioError.setText("Invalid Studio Name");
            podStudioField.setBorder(createTitledBorder("Studio", errorBorder));
            isError = true;
        }

        if (isError) {
            return; // Stop if there are errors
        }

        // Add podcast
        PodcastModel newPodcast = new PodcastModel(podId, podName, genre, hostName, uploadDate, Integer.parseInt(listening), ratings, podStudio);
        podcastsList.add(newPodcast);

        // Refresh table and save data
        addListToTable(podcastsList);
        savePodcastData();
        
        //Show Success Message upon adding a podcast to the table
        JOptionPane.showMessageDialog(this, "Podcast successfully added!", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Clear form
        clearForm();
        resetBorder();
    }//GEN-LAST:event_addBtnActionPerformed
    
    /**
    * Serializes and saves the current podcasts list to a binary file.
    * The file is located at {@code user.dir/src/com/podcastapp/view/file.bin}.
    * 
    * @throws IOException if an I/O error occurs during saving.
    */
    private void savePodcastData() {
    try {
        String filePath = System.getProperty("user.dir") + "/src/com/podcastapp/view/file.bin";
        File file = new File(filePath);

        // Serialize the studentsList
        try (FileOutputStream fileOutputStream = new FileOutputStream(file);
             ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {

            objectOutputStream.writeObject(podcastsList); // Save the LinkedList
        }

        System.out.println("Data saved successfully to: " + file.getAbsolutePath());
    } catch (IOException ex) {
        ex.printStackTrace();
        System.err.println("Error saving data: " + ex.getMessage());
        }
    }

    /**
     * Updates the table with the provided list of podcasts.
     *
     * @param list the list of PodcastModel objects to display in the table
     */
    private void addListToTable(List<PodcastModel> podcastsList1) {
        // Clear the table
        DefaultTableModel model = (DefaultTableModel) tblPodcast.getModel();
        model.setRowCount(0); // Clear all existing rows

        // Loop through the LinkedList and add each podcast to the table
        for (PodcastModel podcast : podcastsList) {
            model.addRow(new Object[]{
                podcast.getPodcastId(),           // Podcast ID
                podcast.getPodcastName(),         // Podcast Name
                podcast.getGenre(),               // Genre
                podcast.getHostName(),            // Host Name
                podcast.getUploadDate(),          // Upload Date
                podcast.getListening(),           // Listening
                podcast.getRatings(),             // Ratings
                podcast.getPodcastStudios()       // Podcast Studios
            });
        }

        // Debug: Print the model row count
        System.out.println("Rows in table model: " + model.getRowCount());
    }
    
    /**
    * Resets the borders of the input fields to titled borders with default styling.
    */
    private void resetBorder(){
        idField.setBorder(createTitledBorder("Podcast ID", defaultBorder));
        nameField.setBorder(createTitledBorder("Podcast Name", defaultBorder));
        genreField.setBorder(createTitledBorder("Genre", defaultBorder));
        hostNameField.setBorder(createTitledBorder("Host Name", defaultBorder));
        dateField.setBorder(createTitledBorder("Podcast Start Date", defaultBorder));
        listeningField.setBorder(createTitledBorder("Listening Hours", defaultBorder));
        podStudioField.setBorder(createTitledBorder("Podcast Studios", defaultBorder));
        ratingField.setBorder(createTitledBorder("Ratings", defaultBorder)); // Added ratingsField reset
    }
    
    /**
    * Clears all input fields in the form by setting their text to an empty string.
    */
    private void clearForm() {
        // Clear the input fields
        idField.setText("");
        nameField.setText("");
        genreField.setText("");
        hostNameField.setText("");
        dateField.setText("");
        podStudioField.setText("");
        listeningField.setText("");
        ratingField.setText("");
    }
    
    /**
    * Handles the action event for the clear button.
    * Calls the {@link #clearForm()} method to reset all input fields.
    *
    * @param evt the action event triggered by the clear button.
    */
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        clearForm();
    }//GEN-LAST:event_clearBtnActionPerformed
    
    /**
    * Handles the window closed event.
    * <p>
    * This method retrieves data from the podcast table model, serializes it,
    * and saves it to a binary file located at {@code user.dir/src/com/podcastapp/view/file.bin}.
    * </p>
    *
    * @param evt the window event triggered when the form is closed.
    */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            // Get the data from the table model
            DefaultTableModel model = (DefaultTableModel) tblPodcast.getModel();
            int rowCount = model.getRowCount();

            // Create a list to store serializable podcast data
            List<Object[]> serializablePodcastData = new ArrayList<>();

            for (int i = 0; i < rowCount; i++) {
                Object[] rowData = new Object[]{
                    model.getValueAt(i, 0), // Podcast ID
                    model.getValueAt(i, 1), // Podcast Name
                    model.getValueAt(i, 2), // Genre
                    model.getValueAt(i, 3), // Host Name
                    model.getValueAt(i, 4), // Upload Date
                    model.getValueAt(i, 5),  // Listening 
                    model.getValueAt(i, 6), // Rating
                    model.getValueAt(i, 7)  // Studio 
                };
                serializablePodcastData.add(rowData);
            }

            // Specify the file path
            String filePath = System.getProperty("user.dir") + "/src/com/podcastapp/view/file.bin";
            File file = new File(filePath);

            // Serialize the podcast data
            try (FileOutputStream fileOutputStream = new FileOutputStream(file);
                 ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
                objectOutputStream.writeObject(serializablePodcastData);
            }

            System.out.println("Podcast data saved successfully to: " + file.getAbsolutePath());
        } catch (IOException ex) {
            ex.printStackTrace();
            System.err.println("Error saving podcast data: " + ex.getMessage());
        }

    }//GEN-LAST:event_formWindowClosed
    
    /**
    * Handles the window opened event.
    * <p>
    * This method checks for the existence of a data file at {@code user.dir/src/com/podcastapp/view/file.bin}.
    * If the file exists, it deserializes the podcast data into the {@code podcastsList} and populates
    * the podcast table with the loaded data. If the file does not exist, it initializes with an empty list.
    * </p>
    *
    * @param evt the window event triggered when the form is opened.
    */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            String filePath = System.getProperty("user.dir") + "/src/com/podcastapp/view/file.bin";
            File file = new File(filePath);

            if (file.exists()) {
                System.out.println("File found. Loading data from: " + file.getAbsolutePath());

                // Deserialize the podcastList directly
                try (FileInputStream fileInputStream = new FileInputStream(file);
                     ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {

                    // Read the LinkedList directly (not Object[])
                    podcastsList = (LinkedList<PodcastModel>) objectInputStream.readObject();

                    // Clear the existing table data
                    DefaultTableModel model = (DefaultTableModel) tblPodcast.getModel();
                    model.setRowCount(0); // Clear existing rows

                    // Populate the table with the deserialized podcast data
                    for (PodcastModel podcast : podcastsList) {
                        model.addRow(new Object[]{
                            podcast.getPodcastId(),
                            podcast.getPodcastName(),
                            podcast.getGenre(),
                            podcast.getHostName(),
                            podcast.getUploadDate(),
                            podcast.getListening(),
                            podcast.getRatings(),
                            podcast.getPodcastStudios()
                        });
                    }

                    System.out.println("Data loaded successfully. Rows added: " + model.getRowCount());
                }
            } else {
                System.out.println("No data file found. Starting with an empty list.");
            }
        } catch (IOException | ClassNotFoundException ex) {
            ex.printStackTrace();
            System.err.println("Error loading podcast data: " + ex.getMessage());
        }

    }//GEN-LAST:event_formWindowOpened
    
    /**
    * Handles the window opened event.
    * <p>
    * This method checks for the existence of a data file at {@code user.dir/src/com/podcastapp/view/file.bin}.
    * If the file exists, it deserializes the podcast data into the {@code podcastsList} and populates
    * the podcast table with the loaded data. If the file does not exist, it initializes with an empty list.
    * </p>
    *
    * @param evt the window event triggered when the form is opened.
    */
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // Clear the error label and reset the border
        idError1.setText("");
        idField1.setBorder(createTitledBorder("Podcast ID", defaultBorder));

        String podIdStr = idField1.getText();

        // Validate the input ID
        if (ValidationUtil.isNullOrEmpty(podIdStr)) {
            idError1.setText("Podcast ID cannot be empty");
            idField1.setBorder(createTitledBorder("Podcast ID", errorBorder));
            return;
        }

        int podId;
        try {
            podId = Integer.parseInt(podIdStr);
        } catch (NumberFormatException e) {
            idError1.setText("Podcast ID must be a valid number");
            idField1.setBorder(createTitledBorder("Podcast ID", errorBorder));
            return;
        }

        // Check if the podcast ID exists in the list
        boolean found = false;
        for (PodcastModel podcast : podcastsList) {
            if (podcast.getPodcastId() == podId) {
                found = true;
                break;
            }
        }

        if (!found) {
            idError1.setText("Podcast ID not found");
            idField1.setBorder(createTitledBorder("Podcast ID", errorBorder));
            return;
        }

        // Show confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to delete the podcast with ID " + podId + "?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return; // User canceled the deletion
        }

        // Remove the podcast from the list
        podcastsList.removeIf(podcast -> podcast.getPodcastId() == podId);

        // Update the table
        addListToTable(podcastsList);

        // Save the updated data to file
        savePodcastData();

        // Clear the input field
        idField1.setText("");

        // Success message
        JOptionPane.showMessageDialog(
            this,
            "Podcast with ID " + podId + " has been deleted successfully.",
            "Deletion Successful",
            JOptionPane.INFORMATION_MESSAGE
        );
    }//GEN-LAST:event_deleteBtnActionPerformed
    
    /**
    * Resets all error message fields to empty strings.
    * This method is used to clear any displayed validation errors in the form.
    */
    private void errorTextReset(){
        idError.setText("");
        nameError.setText("");
        genreError.setText("");
        hostError.setText("");
        listeningError.setText("");
        podDateError.setText("");
        ratingError.setText("");
        podStudioError.setText("");
    }
    
    /**
    * Handles the action event for the update button.
    * <p>
    * This method validates the input fields, updates the podcast details in the list,
    * and saves the changes to a file. It also manages error messages and user confirmations.
    * If no fields are updated, it prompts the user accordingly.
    * </p>
    *
    * @param evt the action event triggered by the update button.
    */
    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // Reset the border and error labels
        resetBorder();
        errorTextReset();
        idError.setText("");

        // Get the input values
        String podIdStr = idField.getText();
        String newPodName = nameField.getText();
        String newGenre = genreField.getText();
        String newHostName = hostNameField.getText();
        String newListening = listeningField.getText();
        String newRatingsStr = ratingField.getText(); // New field for ratings
        String newStudioName = podStudioField.getText(); // New field for studio name

        // Validate Podcast ID
        if (ValidationUtil.isNullOrEmpty(podIdStr)) {
            idError.setText("Podcast ID cannot be empty");
            idField.setBorder(createTitledBorder("Podcast ID", errorBorder));
            return;
        }

        int podId;
        try {
            podId = Integer.parseInt(podIdStr);
        } catch (NumberFormatException e) {
            idError.setText("Podcast ID must be a valid number");
            idField.setBorder(createTitledBorder("Podcast ID", errorBorder));
            return;
        }

        // Check if Podcast ID exists in the list
        PodcastModel podcastToUpdate = null;
        for (PodcastModel podcast : podcastsList) {
            if (podcast.getPodcastId() == podId) {
                podcastToUpdate = podcast;
                break;
            }
        }

        if (podcastToUpdate == null) {
            idError.setText("Podcast ID not found");
            idField.setBorder(createTitledBorder("Podcast ID", errorBorder));
            return;
        }

        // Validate and update new values only if provided
        boolean isUpdated = false;

        // Validate and update Podcast Name
        if (!ValidationUtil.isNullOrEmpty(newPodName)) {
            if (ValidationUtil.isValidPodcastName(newPodName)) {
                podcastToUpdate.setPodcastName(newPodName);
                isUpdated = true;
            } else {
                nameError.setText("Podcast Name must contain only alphanumeric characters");
                nameField.setBorder(createTitledBorder("Podcast Name", errorBorder));
                return;
            }
        }

        // Validate and update Genre
        if (!ValidationUtil.isNullOrEmpty(newGenre)) {
            if (ValidationUtil.isValidGenre(newGenre)) {
                podcastToUpdate.setGenre(newGenre);
                isUpdated = true;
            } else {
                genreError.setText("Genre must be one of the allowed options");
                genreField.setBorder(createTitledBorder("Genre", errorBorder));
                return;
            }
        }

        // Validate and update Host Name
        if (!ValidationUtil.isNullOrEmpty(newHostName)) {
            if (ValidationUtil.isValidHostName(newHostName)) {
                podcastToUpdate.setHostName(newHostName);
                isUpdated = true;
            } else {
                hostError.setText("Host Name must contain only alphabets");
                hostNameField.setBorder(createTitledBorder("Host Name", errorBorder));
                return;
            }
        }

        // Validate and update Listening Minutes
        if (!ValidationUtil.isNullOrEmpty(newListening)) {
            try {
                int newListeningMinutes = Integer.parseInt(newListening);
                if (ValidationUtil.isValidListeningHours(newListeningMinutes)) {
                    podcastToUpdate.setListening(newListeningMinutes); // Pass parsed integer here
                    isUpdated = true;
                } else {
                    listeningError.setText("Listening Minutes must be a valid number within the allowed range");
                    listeningField.setBorder(createTitledBorder("Listening Minutes", errorBorder));
                    return;
                }
            } catch (NumberFormatException e) {
                listeningError.setText("Listening Minutes must be a valid number");
                listeningField.setBorder(createTitledBorder("Listening Minutes", errorBorder));
                return;
            }
        }

        // Validate and update Ratings
        if (!ValidationUtil.isNullOrEmpty(newRatingsStr)) {
            try {
                double newRatings = Double.parseDouble(newRatingsStr);
                if (newRatings >= 0.0 && newRatings <= 5.0) { // Assuming ratings are between 0 and 5
                    podcastToUpdate.setRatings(newRatings);
                    isUpdated = true;
                } else {
                    ratingError.setText("Ratings must be between 0 and 5");
                    ratingField.setBorder(createTitledBorder("Ratings", errorBorder));
                    return;
                }
            } catch (NumberFormatException e) {
                ratingError.setText("Ratings must be a valid decimal number");
                ratingField.setBorder(createTitledBorder("Ratings", errorBorder));
                return;
            }
        }

        // Validate and update Studio Name
        if (!ValidationUtil.isNullOrEmpty(newStudioName)) {
            if (ValidationUtil.isValidPodcastStudio(newStudioName)) {
                podcastToUpdate.setPodcastStudios(newStudioName);
                isUpdated = true;
            } else {
                podStudioError.setText("Studio Name must contain only alphanumeric characters");
                podStudioField.setBorder(createTitledBorder("Studio Name", errorBorder));
                return;
            }
        }

        // If no fields were updated, show a message and return
        if (!isUpdated) {
            JOptionPane.showMessageDialog(
                this,
                "No fields were updated. Please fill at least one field to update.",
                "Update Failed",
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        // Confirmation dialog
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to update the podcast with ID " + podId + "?",
            "Confirm Update",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return; // User canceled the update
        }

        // Update the table
        addListToTable(podcastsList);

        // Save the updated data to file
        savePodcastData();

        // Clear the form
        clearForm();

        // Reset the borders
        resetBorder();

        // Success message
        JOptionPane.showMessageDialog(
            this,
            "Podcast with ID " + podId + " has been updated successfully.",
            "Update Successful",
            JOptionPane.INFORMATION_MESSAGE
        );
        // Switch to pnlPodcastList panel
        tabPaneMain.setSelectedComponent(pnlPodcastList);
    }//GEN-LAST:event_updateBtnActionPerformed

    private final CustomQueue podcastQueue;
    
    /**
    * Handles the action event for queuing a podcast.
    * <p>
    * This method retrieves the Podcast ID from the input field, validates it,
    * checks if the podcast exists, and adds it to the podcast queue. If successful,
    * it updates the queue table and displays a success message. It also handles
    * various error scenarios, including invalid input and a full queue.
    * </p>
    *
    * @param evt the action event triggered by the queue button.
    */
    private void queuePodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queuePodsActionPerformed
            try {
            // Retrieve the Podcast ID from the JTextField
            String podcastIdStr = queueField.getText().trim();

            if (podcastIdStr.isEmpty()) {
                queueError.setText("Enter a PodcastID you want to queue");
                queueField.setBorder(createTitledBorder("Podcast ID", errorBorder));
                return;
            }

            // Parse the Podcast ID
            int podcastId;
            try {
                podcastId = Integer.parseInt(podcastIdStr);
            } catch (NumberFormatException e) {
                queueError.setText("Podcast ID must be a valid number.");
                queueField.setBorder(createTitledBorder("Podcast ID", errorBorder));
                return;
            }

            // Check if the podcast ID exists in the tblPodcast
            if (!isPodcastIdExists(podcastId)) {
                queueError.setText("Podcast ID not found in the existing podcast list.");
                queueField.setBorder(createTitledBorder("Podcast ID", errorBorder));
                return;
            }

            // Check if the podcast ID exists and retrieve the PodcastModel
            PodcastModel podcast = getPodcastById(podcastId);

            if (podcast == null) {
                JOptionPane.showMessageDialog(this, "Podcast not found for the given ID.", "Not Found", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Enqueue the PodcastModel
            podcastQueue.enQueue(podcast);

            // Add to JTable (tblQueuePodcast)
            DefaultTableModel model = (DefaultTableModel) tblQueuePodcast.getModel();
            model.addRow(new Object[]{
                podcastQueue.poll(), // Queue Number (size of the queue)
                podcast.getPodcastName(),   // Podcast Name
                podcast.getGenre(),  // Genre
                podcast.getHostName()// Host Name
            });

            // Clear the input field
            queueField.setText("");

            JOptionPane.showMessageDialog(this, "Podcast successfully added to the queue.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalStateException e) {
            JOptionPane.showMessageDialog(this, "Queue is full. Cannot add more podcasts.", "Queue Full", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_queuePodsActionPerformed
    
    private CustomStack undoStack = new CustomStack();
    /**
    * Handles the action event for queuing a podcast.
    * <p>
    * This method fetches the Podcast ID from the input field, validates it,
    * checks if the podcast exists, and adds it to the podcast queue. If successful,
    * it updates the queue table and displays a success message. It also handles
    * various error scenarios, including invalid input and a full queue.
    * </p>
    *
    * @param evt the action event triggered by the queue button.
    */
    private void playPodcastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPodcastBtnActionPerformed
         DefaultTableModel queueTableModel = (DefaultTableModel) tblQueuePodcast.getModel();
    
        if (queueTableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(
                this,
                "The queue is empty. No podcast to play.",
                "Queue Empty",
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        // Get the podcast details before removal
        Object[] podcastData = new Object[queueTableModel.getColumnCount()];
        for (int i = 0; i < queueTableModel.getColumnCount(); i++) {
            podcastData[i] = queueTableModel.getValueAt(0, i);
        }

        int podcastId = (int) podcastData[0];
        String podcastName = (String) podcastData[1];

        // Store in undo stack
        undoStack.push(podcastData);

        JOptionPane.showMessageDialog(
            this,
            "Playing Podcast: " + podcastName + " (ID: " + podcastId + ")",
            "Playing Podcast",
            JOptionPane.INFORMATION_MESSAGE
        );

        queueTableModel.removeRow(0);
    }//GEN-LAST:event_playPodcastBtnActionPerformed
    
    /**
    * Handles the action event for the search button.
    * <p>
    * This method retrieves the input from the search field, validates it, and performs a search
    * for a podcast by either Podcast ID or Podcast Name. It sorts the podcast list as needed
    * and displays the search results in a dialog. If the input is invalid or the podcast is not found,
    * appropriate error messages are shown.
    * </p>
    *
    * @param evt the action event triggered by the search button.
    */
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // Get the input from the search bar
        String searchValue = searchField.getText();

        // Validate the input
        if (searchValue == null || searchValue.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a valid Podcast Name or ID.", "Search Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Initialize the result variables
        PodcastModel result = null;
        ArrayList<PodcastModel> sortedList = new ArrayList<>(podcastsList);
        
        CustomSelectionSort selectionSorter = new CustomSelectionSort();
        
        try {
            if (searchValue.matches("\\d+")) { // If the input is numeric (Podcast ID)
                int podcastId = Integer.parseInt(searchValue);

                // Sort the list by Podcast ID before performing binary search
                sortedList = (ArrayList<PodcastModel>) selectionSorter.sortByPodcastId(sortedList, false);
                result = BinarySearchAlgorithm.performBinarySearchById(podcastId, sortedList, 0, sortedList.size() - 1);

                if (result != null) {
                    // Display the Podcast Name associated with the Podcast ID
                    JOptionPane.showMessageDialog(this, 
                        "Podcast Found: \nPodcast Name: " + result.getPodcastName(),
                        "Search Result", 
                        JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Podcast ID not found.", "Search Result", JOptionPane.ERROR_MESSAGE);
                }
            } else { // If the input is not numeric (Podcast Name)
                // Sort the list by Podcast Name before performing binary search
                sortedList = (ArrayList<PodcastModel>) selectionSorter.sortByName(sortedList, false);
                result = BinarySearchAlgorithm.performBinarySearchByName(searchValue, sortedList, 0, sortedList.size() - 1);

                if (result != null) {
                    // Display the Ratings and Listening Hours associated with the Podcast Name
                    JOptionPane.showMessageDialog(this, 
                        "Podcast Found: \nRatings: " + result.getRatings() + "\nListening Hours: " + result.getListening(),
                        "Search Result", 
                        JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Podcast Name not found.", "Search Result", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid Podcast ID or Name.", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchBtnActionPerformed
    
    /**
    * Clears the placeholder text in the search field when it gains focus.
    *
    * @param evt the focus event triggered when the search field gains focus.
    */
    private void searchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusGained
        // Clear the placeholder text when the search bar gains focus
        searchField.setText("");
    }//GEN-LAST:event_searchFieldFocusGained
    
    /**
    * Restores the placeholder text in the search field if it is empty when it loses focus.
    *
    * @param evt the focus event triggered when the search field loses focus.
    */
    private void searchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusLost
        // Restore placeholder text if the search bar is empty
        if (searchField.getText().isEmpty() || searchField.getText() == null) {
        searchField.setText("Enter Podcast Name or ID");
        }
    }//GEN-LAST:event_searchFieldFocusLost

    private int clickCount = 0;
    /** 
     * Sorts the list of Podcast List in the table according to the data in the 
     * JComboBox named: filterBox
     * @param evt 
     */
    private void filterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBtnActionPerformed
        // Get the selected filter option from the JComboBox
        String selectedFilter = (String) filterBox.getSelectedItem();
        // Copy the original list for manipulation
        List<PodcastModel> filteredList = new ArrayList<>(podcastsList);
        // Create instances of sorting classes
        CustomSelectionSort selectionSorter = new CustomSelectionSort();
        CustomInsertionSort insertionSorter = new CustomInsertionSort();
        CustomMergeSort mergeSorter = new CustomMergeSort();

        
        // Determine sort order based on click count
        boolean isAscending = clickCount % 3 == 1; // First click ascending, second descending
        
        switch (selectedFilter) {
            case "<Default>":
                // Reset to the original order
                addListToTable(podcastsList); // Use the original list
                break;
            case "By PodcastID":
                // Use SelectionSort to sort by PodcastID
                List<PodcastModel> sortedList = selectionSorter.sortByPodcastId(podcastsList, isAscending);
                addListToTable(sortedList);
                break;
            case "Most Listened To":
                // Use InsertionSort to sort by Listening Hours
                List<PodcastModel> filterList = insertionSorter.sortByListeningHours(podcastsList, isAscending);
                addListToTable(filterList);
                break;
            case "Best Rated":
                // Use InsertionSort to sort by Listening Hours
                List<PodcastModel> mergedList = mergeSorter.sortByRatings(podcastsList, isAscending);
                addListToTable(mergedList);
                break;
            default:
                JOptionPane.showMessageDialog(
                    this,
                    "Unknown filter selected. Please try again.",
                    "Filter Error",
                    JOptionPane.ERROR_MESSAGE
                );
                return; // Return early to avoid incrementing clickCount
        }
        
        // Increment click count and reset after third click
        clickCount = (clickCount + 1) % 3;
    }//GEN-LAST:event_filterBtnActionPerformed

    private void rewindBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rewindBtnActionPerformed
        if (undoStack.isEmpty()) {
        JOptionPane.showMessageDialog(
            this,
            "No podcasts to rewind.",
            "Undo Stack Empty",
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }
    
        DefaultTableModel queueTableModel = (DefaultTableModel) tblQueuePodcast.getModel();
        Object[] podcastData = undoStack.pop();
        queueTableModel.insertRow(0, podcastData);

        JOptionPane.showMessageDialog(
            this,
            "Rewound Podcast: " + podcastData[1],
            "Podcast Rewound",
            JOptionPane.INFORMATION_MESSAGE
        );
    }//GEN-LAST:event_rewindBtnActionPerformed
   
     /**
     * Retrieves a PodcastModel by its ID.
     * If the podcast ID exists, returns the PodcastModel; otherwise, returns null.
     *
     * @param podId The Podcast ID to check.
     * @return The PodcastModel if found, null otherwise.
     */
    private PodcastModel getPodcastById(int podId) {
        for (PodcastModel podcast : podcastsList) { // Replace podcastsList with your actual list reference
            if (podcast.getPodcastId() == podId) {
                return podcast;
            }
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PodcastApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PodcastApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PodcastApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PodcastApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        PodcastApp app = new PodcastApp();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);
        });

        app.startProgress();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddPnl;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField dateField;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel deleteInfo;
    private javax.swing.JPanel deletePanel;
    private javax.swing.JComboBox<String> filterBox;
    private javax.swing.JButton filterBtn;
    private javax.swing.JLabel genreError;
    private javax.swing.JTextField genreField;
    private javax.swing.JLabel homePnl;
    private javax.swing.JLabel hostError;
    private javax.swing.JTextField hostNameField;
    private javax.swing.JLabel idError;
    private javax.swing.JLabel idError1;
    private javax.swing.JTextField idField;
    private javax.swing.JTextField idField1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblLoading;
    private javax.swing.JLabel lblLoadingLogo;
    private javax.swing.JLabel lblLoginError;
    private javax.swing.JLabel lblLoginForgotPwd;
    private javax.swing.JLabel lblLoginLogo;
    private javax.swing.JLabel lblLoginSubTitle;
    private javax.swing.JLabel lblLoginTitle;
    private javax.swing.JLabel lblMainBarLogo;
    private javax.swing.JLabel lblMainBarSlogan;
    private javax.swing.JLabel lblTblFilter;
    private javax.swing.JLabel lblTblStudentTitle;
    private javax.swing.JLabel lblTblStudentTitle1;
    private javax.swing.JLabel lblTblStudentTitle2;
    private javax.swing.JLabel lblTblStudentTitle3;
    private javax.swing.JLabel lblTblWishList;
    private javax.swing.JLabel listeningError;
    private javax.swing.JTextField listeningField;
    private javax.swing.JLabel nameError;
    private javax.swing.JTextField nameField;
    private javax.swing.JProgressBar pgBarSplashScreen;
    private javax.swing.JButton playPodcastBtn;
    private javax.swing.JPanel pnlAboutUs;
    private javax.swing.JPanel pnlAdmin;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlHome;
    private javax.swing.JPanel pnlLoadingScreen;
    private javax.swing.JPanel pnlLoginScreen;
    private javax.swing.JPanel pnlMainBar;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JPanel pnlPodcastList;
    private javax.swing.JPanel pnlWishList;
    private javax.swing.JLabel podDateError;
    private javax.swing.JLabel podStudioError;
    private javax.swing.JTextField podStudioField;
    private javax.swing.JPasswordField pwdFldLogin;
    private javax.swing.JLabel queueError;
    private javax.swing.JTextField queueField;
    private javax.swing.JButton queuePods;
    private javax.swing.JLabel ratingError;
    private javax.swing.JTextField ratingField;
    private javax.swing.JButton rewindBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JScrollPane spTblPodsQueue;
    private javax.swing.JScrollPane spTblStudent;
    private javax.swing.JTabbedPane tabPaneMain;
    private javax.swing.JTable tblPodcast;
    private javax.swing.JTable tblQueuePodcast;
    private javax.swing.JTextField txtFldLoginUsername;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
